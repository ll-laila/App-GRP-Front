import { NgClass, NgOptimizedImage } from '@angular/common';
import { Component, computed, HostBinding, input } from '@angular/core';
import { TextColorDirective } from '../utilities';
import * as i0 from "@angular/core";
import * as i1 from "../utilities/text-color.directive";
export class AvatarComponent {
    constructor() {
        /**
         * Sets the background color context of the component to one of CoreUI’s themed colors.
         * @type Colors
         */
        this.color = input();
        /**
         * Select the shape of the component.
         * @type Shapes
         */
        this.shape = input();
        /**
         * Size the component small, large, or extra large.
         * @default 'md'
         */
        this.size = input('md');
        /**
         * The alt attribute for the img element alternate text.
         * @type string
         */
        this.alt = input('');
        /**
         * The src attribute for the img element.
         * @type string
         */
        this.src = input();
        /**
         * Sets the color context of the status indicator to one of CoreUI’s themed colors.
         * @type Colors
         */
        this.status = input();
        /**
         * Sets the text color of the component to one of CoreUI’s themed colors.
         * via TextColorDirective
         * @type TextColors
         */
        this.textColor = input();
        this.statusClass = computed(() => {
            return {
                'avatar-status': true,
                [`bg-${this.status()}`]: !!this.status()
            };
        });
    }
    get hostClasses() {
        return {
            avatar: true,
            [`avatar-${this.size()}`]: !!this.size(),
            [`bg-${this.color()}`]: !!this.color(),
            [`${this.shape()}`]: !!this.shape()
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.1", ngImport: i0, type: AvatarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.1.1", type: AvatarComponent, isStandalone: true, selector: "c-avatar", inputs: { color: { classPropertyName: "color", publicName: "color", isSignal: true, isRequired: false, transformFunction: null }, shape: { classPropertyName: "shape", publicName: "shape", isSignal: true, isRequired: false, transformFunction: null }, size: { classPropertyName: "size", publicName: "size", isSignal: true, isRequired: false, transformFunction: null }, alt: { classPropertyName: "alt", publicName: "alt", isSignal: true, isRequired: false, transformFunction: null }, src: { classPropertyName: "src", publicName: "src", isSignal: true, isRequired: false, transformFunction: null }, status: { classPropertyName: "status", publicName: "status", isSignal: true, isRequired: false, transformFunction: null }, textColor: { classPropertyName: "textColor", publicName: "textColor", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "class": "this.hostClasses" }, classAttribute: "avatar" }, hostDirectives: [{ directive: i1.TextColorDirective, inputs: ["cTextColor", "textColor"] }], ngImport: i0, template: "<ng-content>\n  @if (src()) {\n    @defer (prefetch on idle) {\n      <img [ngSrc]=\"src() ?? ''\" fill=\"\" class=\"avatar-img\" alt=\"{{alt()}}\" />\n    } @placeholder () {\n      <svg aria-label=\"Avatar placeholder\"\n           focusable=\"false\"\n           preserveAspectRatio=\"xMidYMid slice\"\n           role=\"img\"\n           xmlns=\"http://www.w3.org/2000/svg\"\n           class=\"avatar-img\"\n           style=\"position: absolute; width: 100%; height: 100%; inset: 0;\">\n        <rect fill=\"#868e96\" height=\"100%\" width=\"100%\"></rect>\n      </svg>\n    }\n  }\n</ng-content>\n@if (!!status()) {\n  <span [ngClass]=\"statusClass()\"></span>\n}\n\n", dependencies: [{ kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], deferBlockDependencies: [() => [NgOptimizedImage]] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.1", ngImport: i0, type: AvatarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c-avatar', standalone: true, imports: [NgClass, NgOptimizedImage], hostDirectives: [
                        {
                            directive: TextColorDirective,
                            inputs: ['cTextColor: textColor']
                        }
                    ], host: { class: 'avatar' }, template: "<ng-content>\n  @if (src()) {\n    @defer (prefetch on idle) {\n      <img [ngSrc]=\"src() ?? ''\" fill=\"\" class=\"avatar-img\" alt=\"{{alt()}}\" />\n    } @placeholder () {\n      <svg aria-label=\"Avatar placeholder\"\n           focusable=\"false\"\n           preserveAspectRatio=\"xMidYMid slice\"\n           role=\"img\"\n           xmlns=\"http://www.w3.org/2000/svg\"\n           class=\"avatar-img\"\n           style=\"position: absolute; width: 100%; height: 100%; inset: 0;\">\n        <rect fill=\"#868e96\" height=\"100%\" width=\"100%\"></rect>\n      </svg>\n    }\n  }\n</ng-content>\n@if (!!status()) {\n  <span [ngClass]=\"statusClass()\"></span>\n}\n\n" }]
        }], propDecorators: { hostClasses: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvYXZhdGFyL2F2YXRhci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JldWktYW5ndWxhci9zcmMvbGliL2F2YXRhci9hdmF0YXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVELE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFHckYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sY0FBYyxDQUFDOzs7QUFlbEQsTUFBTSxPQUFPLGVBQWU7SUFiNUI7UUFjRTs7O1dBR0c7UUFDTSxVQUFLLEdBQW9DLEtBQUssRUFBRSxDQUFDO1FBRTFEOzs7V0FHRztRQUNNLFVBQUssR0FBb0MsS0FBSyxFQUFFLENBQUM7UUFFMUQ7OztXQUdHO1FBQ00sU0FBSSxHQUFvQyxLQUFLLENBQXFCLElBQUksQ0FBQyxDQUFDO1FBRWpGOzs7V0FHRztRQUNNLFFBQUcsR0FBd0IsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTlDOzs7V0FHRztRQUNNLFFBQUcsR0FBb0MsS0FBSyxFQUFFLENBQUM7UUFFeEQ7OztXQUdHO1FBQ00sV0FBTSxHQUFvQyxLQUFLLEVBQUUsQ0FBQztRQUUzRDs7OztXQUlHO1FBQ00sY0FBUyxHQUF3QyxLQUFLLEVBQUUsQ0FBQztRQUV6RCxnQkFBVyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDbkMsT0FBTztnQkFDTCxlQUFlLEVBQUUsSUFBSTtnQkFDckIsQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7YUFDekMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0tBV0o7SUFUQyxJQUNJLFdBQVc7UUFDYixPQUFPO1lBQ0wsTUFBTSxFQUFFLElBQUk7WUFDWixDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUN4QyxDQUFDLE1BQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN0QyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtTQUNwQyxDQUFDO0lBQ0osQ0FBQzs4R0EzRFUsZUFBZTtrR0FBZixlQUFlLHNrQ0NuQjVCLHFxQkFxQkEsNENEWFksT0FBTywwRkFBRSxnQkFBZ0I7OzJGQVN4QixlQUFlO2tCQWIzQixTQUFTOytCQUNFLFVBQVUsY0FFUixJQUFJLFdBQ1AsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsa0JBQ3BCO3dCQUNkOzRCQUNFLFNBQVMsRUFBRSxrQkFBa0I7NEJBQzdCLE1BQU0sRUFBRSxDQUFDLHVCQUF1QixDQUFDO3lCQUNsQztxQkFDRixRQUNLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTs4QkFzRHJCLFdBQVc7c0JBRGQsV0FBVzt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdDbGFzcywgTmdPcHRpbWl6ZWRJbWFnZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDb21wb25lbnQsIGNvbXB1dGVkLCBIb3N0QmluZGluZywgaW5wdXQsIElucHV0U2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbG9ycywgU2hhcGVzLCBTaXplcywgVGV4dENvbG9ycyB9IGZyb20gJy4uL2NvcmV1aS50eXBlcyc7XG5pbXBvcnQgeyBUZXh0Q29sb3JEaXJlY3RpdmUgfSBmcm9tICcuLi91dGlsaXRpZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjLWF2YXRhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9hdmF0YXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbTmdDbGFzcywgTmdPcHRpbWl6ZWRJbWFnZV0sXG4gIGhvc3REaXJlY3RpdmVzOiBbXG4gICAge1xuICAgICAgZGlyZWN0aXZlOiBUZXh0Q29sb3JEaXJlY3RpdmUsXG4gICAgICBpbnB1dHM6IFsnY1RleHRDb2xvcjogdGV4dENvbG9yJ11cbiAgICB9XG4gIF0sXG4gIGhvc3Q6IHsgY2xhc3M6ICdhdmF0YXInIH1cbn0pXG5leHBvcnQgY2xhc3MgQXZhdGFyQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFNldHMgdGhlIGJhY2tncm91bmQgY29sb3IgY29udGV4dCBvZiB0aGUgY29tcG9uZW50IHRvIG9uZSBvZiBDb3JlVUnigJlzIHRoZW1lZCBjb2xvcnMuXG4gICAqIEB0eXBlIENvbG9yc1xuICAgKi9cbiAgcmVhZG9ubHkgY29sb3I6IElucHV0U2lnbmFsPENvbG9ycyB8IHVuZGVmaW5lZD4gPSBpbnB1dCgpO1xuXG4gIC8qKlxuICAgKiBTZWxlY3QgdGhlIHNoYXBlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEB0eXBlIFNoYXBlc1xuICAgKi9cbiAgcmVhZG9ubHkgc2hhcGU6IElucHV0U2lnbmFsPFNoYXBlcyB8IHVuZGVmaW5lZD4gPSBpbnB1dCgpO1xuXG4gIC8qKlxuICAgKiBTaXplIHRoZSBjb21wb25lbnQgc21hbGwsIGxhcmdlLCBvciBleHRyYSBsYXJnZS5cbiAgICogQGRlZmF1bHQgJ21kJ1xuICAgKi9cbiAgcmVhZG9ubHkgc2l6ZTogSW5wdXRTaWduYWw8T21pdDxTaXplcywgJ3h4bCc+PiA9IGlucHV0PE9taXQ8U2l6ZXMsICd4eGwnPj4oJ21kJyk7XG5cbiAgLyoqXG4gICAqIFRoZSBhbHQgYXR0cmlidXRlIGZvciB0aGUgaW1nIGVsZW1lbnQgYWx0ZXJuYXRlIHRleHQuXG4gICAqIEB0eXBlIHN0cmluZ1xuICAgKi9cbiAgcmVhZG9ubHkgYWx0OiBJbnB1dFNpZ25hbDxzdHJpbmc+ID0gaW5wdXQoJycpO1xuXG4gIC8qKlxuICAgKiBUaGUgc3JjIGF0dHJpYnV0ZSBmb3IgdGhlIGltZyBlbGVtZW50LlxuICAgKiBAdHlwZSBzdHJpbmdcbiAgICovXG4gIHJlYWRvbmx5IHNyYzogSW5wdXRTaWduYWw8c3RyaW5nIHwgdW5kZWZpbmVkPiA9IGlucHV0KCk7XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGNvbG9yIGNvbnRleHQgb2YgdGhlIHN0YXR1cyBpbmRpY2F0b3IgdG8gb25lIG9mIENvcmVVSeKAmXMgdGhlbWVkIGNvbG9ycy5cbiAgICogQHR5cGUgQ29sb3JzXG4gICAqL1xuICByZWFkb25seSBzdGF0dXM6IElucHV0U2lnbmFsPENvbG9ycyB8IHVuZGVmaW5lZD4gPSBpbnB1dCgpO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0ZXh0IGNvbG9yIG9mIHRoZSBjb21wb25lbnQgdG8gb25lIG9mIENvcmVVSeKAmXMgdGhlbWVkIGNvbG9ycy5cbiAgICogdmlhIFRleHRDb2xvckRpcmVjdGl2ZVxuICAgKiBAdHlwZSBUZXh0Q29sb3JzXG4gICAqL1xuICByZWFkb25seSB0ZXh0Q29sb3I6IElucHV0U2lnbmFsPFRleHRDb2xvcnMgfCB1bmRlZmluZWQ+ID0gaW5wdXQoKTtcblxuICByZWFkb25seSBzdGF0dXNDbGFzcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgJ2F2YXRhci1zdGF0dXMnOiB0cnVlLFxuICAgICAgW2BiZy0ke3RoaXMuc3RhdHVzKCl9YF06ICEhdGhpcy5zdGF0dXMoKVxuICAgIH07XG4gIH0pO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICBnZXQgaG9zdENsYXNzZXMoKTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgYXZhdGFyOiB0cnVlLFxuICAgICAgW2BhdmF0YXItJHt0aGlzLnNpemUoKX1gXTogISF0aGlzLnNpemUoKSxcbiAgICAgIFtgYmctJHt0aGlzLmNvbG9yKCl9YF06ICEhdGhpcy5jb2xvcigpLFxuICAgICAgW2Ake3RoaXMuc2hhcGUoKX1gXTogISF0aGlzLnNoYXBlKClcbiAgICB9O1xuICB9XG59XG4iLCI8bmctY29udGVudD5cbiAgQGlmIChzcmMoKSkge1xuICAgIEBkZWZlciAocHJlZmV0Y2ggb24gaWRsZSkge1xuICAgICAgPGltZyBbbmdTcmNdPVwic3JjKCkgPz8gJydcIiBmaWxsPVwiXCIgY2xhc3M9XCJhdmF0YXItaW1nXCIgYWx0PVwie3thbHQoKX19XCIgLz5cbiAgICB9IEBwbGFjZWhvbGRlciAoKSB7XG4gICAgICA8c3ZnIGFyaWEtbGFiZWw9XCJBdmF0YXIgcGxhY2Vob2xkZXJcIlxuICAgICAgICAgICBmb2N1c2FibGU9XCJmYWxzZVwiXG4gICAgICAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW89XCJ4TWlkWU1pZCBzbGljZVwiXG4gICAgICAgICAgIHJvbGU9XCJpbWdcIlxuICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICAgY2xhc3M9XCJhdmF0YXItaW1nXCJcbiAgICAgICAgICAgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGluc2V0OiAwO1wiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiIzg2OGU5NlwiIGhlaWdodD1cIjEwMCVcIiB3aWR0aD1cIjEwMCVcIj48L3JlY3Q+XG4gICAgICA8L3N2Zz5cbiAgICB9XG4gIH1cbjwvbmctY29udGVudD5cbkBpZiAoISFzdGF0dXMoKSkge1xuICA8c3BhbiBbbmdDbGFzc109XCJzdGF0dXNDbGFzcygpXCI+PC9zcGFuPlxufVxuXG4iXX0=